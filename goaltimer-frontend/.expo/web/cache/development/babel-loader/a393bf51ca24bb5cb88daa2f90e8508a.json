{"ast":null,"code":"!function () {\n  'use strict';\n\n  var re = {\n    not_string: /[^s]/,\n    not_bool: /[^t]/,\n    not_type: /[^T]/,\n    not_primitive: /[^v]/,\n    number: /[diefg]/,\n    numeric_arg: /[bcdiefguxX]/,\n    json: /[j]/,\n    not_json: /[^j]/,\n    text: /^[^\\x25]+/,\n    modulo: /^\\x25{2}/,\n    placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n    key: /^([a-z_][a-z_\\d]*)/i,\n    key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n    index_access: /^\\[(\\d+)\\]/,\n    sign: /^[+-]/\n  };\n\n  function sprintf(key) {\n    return sprintf_format(sprintf_parse(key), arguments);\n  }\n\n  function vsprintf(fmt, argv) {\n    return sprintf.apply(null, [fmt].concat(argv || []));\n  }\n\n  function sprintf_format(parse_tree, argv) {\n    var cursor = 1,\n        tree_length = parse_tree.length,\n        arg,\n        output = '',\n        i,\n        k,\n        ph,\n        pad,\n        pad_character,\n        pad_length,\n        is_positive,\n        sign;\n\n    for (i = 0; i < tree_length; i++) {\n      if (typeof parse_tree[i] === 'string') {\n        output += parse_tree[i];\n      } else if (typeof parse_tree[i] === 'object') {\n        ph = parse_tree[i];\n\n        if (ph.keys) {\n          arg = argv[cursor];\n\n          for (k = 0; k < ph.keys.length; k++) {\n            if (arg == undefined) {\n              throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k - 1]));\n            }\n\n            arg = arg[ph.keys[k]];\n          }\n        } else if (ph.param_no) {\n          arg = argv[ph.param_no];\n        } else {\n          arg = argv[cursor++];\n        }\n\n        if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n          arg = arg();\n        }\n\n        if (re.numeric_arg.test(ph.type) && typeof arg !== 'number' && isNaN(arg)) {\n          throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg));\n        }\n\n        if (re.number.test(ph.type)) {\n          is_positive = arg >= 0;\n        }\n\n        switch (ph.type) {\n          case 'b':\n            arg = parseInt(arg, 10).toString(2);\n            break;\n\n          case 'c':\n            arg = String.fromCharCode(parseInt(arg, 10));\n            break;\n\n          case 'd':\n          case 'i':\n            arg = parseInt(arg, 10);\n            break;\n\n          case 'j':\n            arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);\n            break;\n\n          case 'e':\n            arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();\n            break;\n\n          case 'f':\n            arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);\n            break;\n\n          case 'g':\n            arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);\n            break;\n\n          case 'o':\n            arg = (parseInt(arg, 10) >>> 0).toString(8);\n            break;\n\n          case 's':\n            arg = String(arg);\n            arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n            break;\n\n          case 't':\n            arg = String(!!arg);\n            arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n            break;\n\n          case 'T':\n            arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();\n            arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n            break;\n\n          case 'u':\n            arg = parseInt(arg, 10) >>> 0;\n            break;\n\n          case 'v':\n            arg = arg.valueOf();\n            arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n            break;\n\n          case 'x':\n            arg = (parseInt(arg, 10) >>> 0).toString(16);\n            break;\n\n          case 'X':\n            arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();\n            break;\n        }\n\n        if (re.json.test(ph.type)) {\n          output += arg;\n        } else {\n          if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n            sign = is_positive ? '+' : '-';\n            arg = arg.toString().replace(re.sign, '');\n          } else {\n            sign = '';\n          }\n\n          pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' ';\n          pad_length = ph.width - (sign + arg).length;\n          pad = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : '' : '';\n          output += ph.align ? sign + arg + pad : pad_character === '0' ? sign + pad + arg : pad + sign + arg;\n        }\n      }\n    }\n\n    return output;\n  }\n\n  var sprintf_cache = Object.create(null);\n\n  function sprintf_parse(fmt) {\n    if (sprintf_cache[fmt]) {\n      return sprintf_cache[fmt];\n    }\n\n    var _fmt = fmt,\n        match,\n        parse_tree = [],\n        arg_names = 0;\n\n    while (_fmt) {\n      if ((match = re.text.exec(_fmt)) !== null) {\n        parse_tree.push(match[0]);\n      } else if ((match = re.modulo.exec(_fmt)) !== null) {\n        parse_tree.push('%');\n      } else if ((match = re.placeholder.exec(_fmt)) !== null) {\n        if (match[2]) {\n          arg_names |= 1;\n          var field_list = [],\n              replacement_field = match[2],\n              field_match = [];\n\n          if ((field_match = re.key.exec(replacement_field)) !== null) {\n            field_list.push(field_match[1]);\n\n            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n              if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                field_list.push(field_match[1]);\n              } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                field_list.push(field_match[1]);\n              } else {\n                throw new SyntaxError('[sprintf] failed to parse named argument key');\n              }\n            }\n          } else {\n            throw new SyntaxError('[sprintf] failed to parse named argument key');\n          }\n\n          match[2] = field_list;\n        } else {\n          arg_names |= 2;\n        }\n\n        if (arg_names === 3) {\n          throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported');\n        }\n\n        parse_tree.push({\n          placeholder: match[0],\n          param_no: match[1],\n          keys: match[2],\n          sign: match[3],\n          pad_char: match[4],\n          align: match[5],\n          width: match[6],\n          precision: match[7],\n          type: match[8]\n        });\n      } else {\n        throw new SyntaxError('[sprintf] unexpected placeholder');\n      }\n\n      _fmt = _fmt.substring(match[0].length);\n    }\n\n    return sprintf_cache[fmt] = parse_tree;\n  }\n\n  if (typeof exports !== 'undefined') {\n    exports['sprintf'] = sprintf;\n    exports['vsprintf'] = vsprintf;\n  }\n\n  if (typeof window !== 'undefined') {\n    window['sprintf'] = sprintf;\n    window['vsprintf'] = vsprintf;\n\n    if (typeof define === 'function' && define['amd']) {\n      define(function () {\n        return {\n          'sprintf': sprintf,\n          'vsprintf': vsprintf\n        };\n      });\n    }\n  }\n}();","map":{"version":3,"sources":["/Users/guillerdalit/Desktop/Workplace/github/goaltimer/goaltimer-frontend/node_modules/react-native-countdown-component/node_modules/sprintf-js/src/sprintf.js"],"names":["re","not_string","not_bool","not_type","not_primitive","number","numeric_arg","json","not_json","text","modulo","placeholder","key","key_access","index_access","sign","sprintf","sprintf_format","sprintf_parse","arguments","vsprintf","fmt","argv","apply","concat","parse_tree","cursor","tree_length","length","arg","output","i","k","ph","pad","pad_character","pad_length","is_positive","keys","undefined","Error","param_no","test","type","Function","isNaN","TypeError","parseInt","toString","String","fromCharCode","JSON","stringify","width","precision","parseFloat","toExponential","toFixed","Number","toPrecision","substring","Object","prototype","call","slice","toLowerCase","valueOf","toUpperCase","replace","pad_char","charAt","repeat","align","sprintf_cache","create","_fmt","match","arg_names","exec","push","field_list","replacement_field","field_match","SyntaxError","exports","window","define"],"mappings":"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","sourcesContent":["/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n"]},"metadata":{},"sourceType":"script"}